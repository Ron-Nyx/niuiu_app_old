///##################################################
///#### Generated by mvcBuilder - Do Not Modify #####
///##################################################
part of sensitivity_step;

ControllerRegistry<SensitivityStepController> _$registry =
    ControllerRegistry<SensitivityStepController>();

class $SensitivityStep extends ViewWrapper {
  const $SensitivityStep({
    String? controllerId,
    bool forceAttach = false,
  }) : super(controllerId, forceAttach);
  factory $SensitivityStep.fromController(
    SensitivityStepController controller, {
    bool forceAttach = false,
  }) {
    return $SensitivityStep(
      controllerId: controller.controllerId,
      forceAttach: forceAttach,
    );
  }
  @override
  State<StatefulWidget> createState() => _$SensitivityStepState();
  static SensitivityStepController createController({
    String? controllerId,
  }) {
    SensitivityStepController controller = SensitivityStepController._(
      StateController<double>(0),
      StateController<StimulationPhase>(StimulationPhase.IDLE),
    );
    controller.progressStateController = StateController<double>(0);
    controller.stimulationPhaseStateController =
        StateController<StimulationPhase>(StimulationPhase.IDLE);
    _$registry.addController(controller, controllerId, () {
      controller.progressStateController.close();
      controller.stimulationPhaseStateController.close();
    });
    controller.onInit();
    return controller;
  }

  static SensitivityStepController getController({required String id}) =>
      _$registry.getControllerStrict(id);
  static SensitivityStepController getControllerWhere(
          bool Function(SensitivityStepController) callback) =>
      _$registry.getControllerWhereStrict(callback);
}

class _$SensitivityStepState extends ViewWrapperState<$SensitivityStep, SensitivityStepController> {
  ControllerRegistry<SensitivityStepController> registry = _$registry;
  View get view => SensitivityStep._();
  SensitivityStepController createController(String? controllerId) =>
      $SensitivityStep.createController(
        controllerId: controllerId,
      );
}

mixin _$SensitivityStepControllerMixin on Controller {
  late StateController<double> progressStateController;
  late StateController<StimulationPhase> stimulationPhaseStateController;
}
