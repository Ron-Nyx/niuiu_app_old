///##################################################
///#### Generated by mvcBuilder - Do Not Modify #####
///##################################################
part of signal_step;

ControllerRegistry<SignalStepController> _$registry = ControllerRegistry<SignalStepController>();

class $SignalStep extends ViewWrapper {
  const $SignalStep({
    String? controllerId,
    bool forceAttach = false,
  }) : super(controllerId, forceAttach);
  factory $SignalStep.fromController(
    SignalStepController controller, {
    bool forceAttach = false,
  }) {
    return $SignalStep(
      controllerId: controller.controllerId,
      forceAttach: forceAttach,
    );
  }
  @override
  State<StatefulWidget> createState() => _$SignalStepState();
  static SignalStepController createController({
    String? controllerId,
  }) {
    SignalStepController controller = SignalStepController._(
      StateController<SignalStatus>(SignalStatus.IDLE),
    );
    controller.signalStatusController = StateController<SignalStatus>(SignalStatus.IDLE);
    _$registry.addController(controller, controllerId, () {
      controller.signalStatusController.close();
    });
    controller.onInit();
    return controller;
  }

  static SignalStepController getController({required String id}) =>
      _$registry.getControllerStrict(id);
  static SignalStepController getControllerWhere(bool Function(SignalStepController) callback) =>
      _$registry.getControllerWhereStrict(callback);
}

class _$SignalStepState extends ViewWrapperState<$SignalStep, SignalStepController> {
  ControllerRegistry<SignalStepController> registry = _$registry;
  View get view => SignalStep._();
  SignalStepController createController(String? controllerId) => $SignalStep.createController(
        controllerId: controllerId,
      );
}

mixin _$SignalStepControllerMixin on Controller {
  late StateController<SignalStatus> signalStatusController;
}
