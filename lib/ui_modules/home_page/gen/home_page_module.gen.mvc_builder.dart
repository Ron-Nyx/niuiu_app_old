///##################################################
///#### Generated by mvcBuilder - Do Not Modify #####
///##################################################
part of home_page;

ControllerRegistry<HomePageController> _$registry = ControllerRegistry<HomePageController>();

class $HomePage extends ViewWrapper {
  final Device? device;
  const $HomePage({
    String? controllerId,
    bool forceAttach = false,
    required this.device,
  }) : super(controllerId, forceAttach);
  factory $HomePage.fromController(
    HomePageController controller, {
    bool forceAttach = false,
  }) {
    return $HomePage(
      controllerId: controller.controllerId,
      forceAttach: forceAttach,
      device: controller.device,
    );
  }
  @override
  State<StatefulWidget> createState() => _$HomePageState();
  static HomePageController createController({
    String? controllerId,
    required Device? device,
  }) {
    HomePageController controller = HomePageController._(
      device,
      StateController<bool>(false),
      StateController<SessionPhase>(SessionPhase.IDLE),
      StateController<List<String>>([]),
      StateController<int>(0),
      StateController<bool>(false),
    );
    controller.device = device;
    controller.sessionCaptureStateController = StateController<bool>(false);
    controller.sessionPhaseStateController = StateController<SessionPhase>(SessionPhase.IDLE);
    controller.logsStateController = StateController<List<String>>([]);
    controller.batteryStateController = StateController<int>(0);
    controller.liveDataStateController = StateController<bool>(false);
    _$registry.addController(controller, controllerId, () {
      controller.sessionCaptureStateController.close();
      controller.sessionPhaseStateController.close();
      controller.logsStateController.close();
      controller.batteryStateController.close();
      controller.liveDataStateController.close();
    });
    controller.onInit();
    return controller;
  }

  static HomePageController getController({required String id}) =>
      _$registry.getControllerStrict(id);
  static HomePageController getControllerWhere(bool Function(HomePageController) callback) =>
      _$registry.getControllerWhereStrict(callback);
}

class _$HomePageState extends ViewWrapperState<$HomePage, HomePageController> {
  ControllerRegistry<HomePageController> registry = _$registry;
  View get view => HomePage._();
  HomePageController createController(String? controllerId) => $HomePage.createController(
        controllerId: controllerId,
        device: widget.device,
      );
}

mixin _$HomePageControllerMixin on Controller {
  late Device? device;
  late StateController<bool> sessionCaptureStateController;
  late StateController<SessionPhase> sessionPhaseStateController;
  late StateController<List<String>> logsStateController;
  late StateController<int> batteryStateController;
  late StateController<bool> liveDataStateController;
}
