///##################################################
///#### Generated by mvcBuilder - Do Not Modify #####
///##################################################
part of bluetooth_item;

ControllerRegistry<BluetoothItemController> _$registry =
    ControllerRegistry<BluetoothItemController>();

class $BluetoothItem extends ViewWrapper {
  const $BluetoothItem({
    String? controllerId,
    bool forceAttach = false,
  }) : super(controllerId, forceAttach);
  factory $BluetoothItem.fromController(
    BluetoothItemController controller, {
    bool forceAttach = false,
  }) {
    return $BluetoothItem(
      controllerId: controller.controllerId,
      forceAttach: forceAttach,
    );
  }
  @override
  State<StatefulWidget> createState() => _$BluetoothItemState();
  static BluetoothItemController createController({
    String? controllerId,
  }) {
    BluetoothItemController controller = BluetoothItemController._();
    _$registry.addController(controller, controllerId, () {});
    controller.onInit();
    return controller;
  }

  static BluetoothItemController getController({required String id}) =>
      _$registry.getControllerStrict(id);
  static BluetoothItemController getControllerWhere(
          bool Function(BluetoothItemController) callback) =>
      _$registry.getControllerWhereStrict(callback);
}

class _$BluetoothItemState extends ViewWrapperState<$BluetoothItem, BluetoothItemController> {
  ControllerRegistry<BluetoothItemController> registry = _$registry;
  View get view => BluetoothItem._();
  BluetoothItemController createController(String? controllerId) => $BluetoothItem.createController(
        controllerId: controllerId,
      );
}

mixin _$BluetoothItemControllerMixin on Controller {}
